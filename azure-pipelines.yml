# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7d080e53-9ef8-4106-bb0e-7ef217fbf9c2'
  imageRepository: 'tdcsp2020-demo'
  containerRegistry: 'tdcsp2020.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Temperature.Converter.API/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: BuildDotNet
    jobs:
    - job:
      displayName: Build Solution
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: DotNetCoreCLI@2
          displayName: Nuget Restore
          inputs:
            command: 'restore'
            projects: '.'
            feedsToUse: 'select'
        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            command: 'build'
            projects: './*.sln'
        - task: SonarCloudPrepare@1
          displayName: SonarCloud Prepare
          inputs:
            SonarCloud: 'SonarCloud'
            organization: 'marcelgol'
            scannerMode: 'MSBuild'
            projectKey: 'marcelgol_tdcsp2020-demo'
            projectName: 'tdcsp2020-demo'
        - task: DotNetCoreCLI@2
          displayName: Unit Test
          inputs:
            command: 'test'
            projects: './Temperature.Converter.Tests'
        - task: SonarCloudAnalyze@1
          displayName: SonarCloud Analysis
        - task: SonarCloudPublish@1
          displayName: SonarCloud Publishing Results
          inputs:
            pollingTimeoutSec: '300'
        - task: DotNetCoreCLI@2
          displayName: Publish
          inputs:
            command: 'publish'
            publishWebProjects: false
            arguments: '-o ./out'
            zipAfterPublish: false
            workingDirectory: './Temperature.Converter.API'
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            containerRegistry: $(dockerRegistryServiceConnection)
            tags: |
              $(tag)
        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'Visual Studio Professional(1)(94211381-cbc5-4473-b790-de89414c0bfc)'
            appType: 'webAppContainer'
            WebAppName: 'tdcsp2020-demo-dockerapp'
            DockerNamespace: '$(containerRegistry)'
            DockerRepository: '$(imageRepository)'
            DockerImageTag: '$(tag)'
            
        - task: AzureAppServiceManage@0
          inputs:
            azureSubscription: 'Visual Studio Professional(1)(94211381-cbc5-4473-b790-de89414c0bfc)'
            Action: 'Stop Azure App Service'
            WebAppName: 'tdcsp2020-demo-dockerapp'
        - task: AzureAppServiceManage@0
          inputs:
            azureSubscription: 'Visual Studio Professional(1)(94211381-cbc5-4473-b790-de89414c0bfc)'
            Action: 'Start Azure App Service'
            WebAppName: 'tdcsp2020-demo-dockerapp'